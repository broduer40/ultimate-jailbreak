#include <amxmisc>
#include <amxmodx>
#include <fakemeta>
#include <fun>
#include <cstrike>
#include <hamsandwich>
#include <engine>
#include <nvault>
#include <xs>
#include <dhudmessage>
#include <uj_core>
#include <uj_colorchat>
#include <uj_menus>
#include <uj_playermenu>

new const PLUGIN_NAME[] = "[UJ] Menu - Heal";
new const PLUGIN_AUTH[] = "eDeloa";
new const PLUGIN_VERS[] = "v0.1";

new const MENU_NAME[] = "Heal prisoners";

new g_pluginID;
new g_menuEntry;
new g_mainMain;

new explosion_sprite;     // Suicide bomber sprite

public plugin_init()
{
  g_pluginID = register_plugin(PLUGIN_NAME, PLUGIN_VERS, PLUGIN_AUTH);

  // Now register this menu as an item of the main menu
  g_mainMain = uj_menus_get_menu_id("Main Menu");
  g_menuEntry = uj_menus_register_entry(MENU_NAME);
}

public uj_fw_menus_select_pre(playerID, menuID, entryID)
{
  // This is not our item - do not block
  if (entryID != g_menuEntry)
    return UJ_MENU_AVAILABLE;
  
  // Only display to Counter Terrorists
  if (cs_get_user_team(playerID) != CS_TEAM_CT)
    return UJ_MENU_DONT_SHOW;

  // Do not show if it is not in this specific parent menu
  if (menuID != g_mainMain)
    return UJ_MENU_DONT_SHOW;
  
  return UJ_MENU_AVAILABLE;
}

public uj_fw_menus_select_post(playerID, menuID, entryID)
{
  // This is not our item
  if (g_menuEntry != entryID)
    return;

  // After calling this, wait for a response by listening to uj_fw_playermenu_select_post()
  //uj_playermenu_show_team_players(playerID, "ace", "TERRORIST");

  new players[32];
  new playerCount = uj_core_get_players(players, true, CS_TEAM_T);
  uj_playermenu_show_players(playerID, players, playerCount);
}

// Called after a player has selected a target
public uj_fw_playermenu_player_select(pluginID, playerID, targetID)
{
  // Not intiated by us - don't continue;
  if (pluginID != g_pluginID) {
    return;
  }

  // Heal the target to his/her max health
  new Float:health;
  pev(targetID, pev_max_health, health);
  set_pev(targetID, pev_health, health);

  // Announce the heal
  new playerName[32], targetName[32];
  get_user_name(playerID, playerName, charsmax(playerName));
  get_user_name(targetID, targetName, charsmax(targetName));
  uj_colorchat_print(0, playerID, "^3%s^1 has healed ^3%s^1 to ^4%i^1 HP!", playerName, targetName, floatround(health));
}

/*================================================================================
 [Suicide Bomber]
=================================================================================*/

public explode_me(id) {
  // get my origin
  new Float:explosion[3];
  pev(id, pev_origin, explosion);

  user_kill(id);
  
  // create explosion
  message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
  write_byte(TE_EXPLOSION);
  write_coord(floatround(explosion[0]));
  write_coord(floatround(explosion[1]));
  write_coord(floatround(explosion[2]));
  write_short(explosion_sprite);
  write_byte(30);
  write_byte(30);
  write_byte(0);
  message_end();

  fm_radius_damage(id, explosion, EXPLODE_DAMAGE, EXPLODE_RADIUS, "grenade");
}

stock fm_radius_damage(id, Float:orig[3], Float:dmg , Float:rad, wpnName[]="") {
  new szClassname[33], Float:Health;
  static Ent;
  Ent = -1;
  while((Ent = engfunc(EngFunc_FindEntityInSphere, Ent, orig, rad))) {
    pev(Ent,pev_classname,szClassname,32);
    if(equali(szClassname, "player") 
    && get_bit(g_bIsConnected, Ent) 
    && get_bit(g_bIsAlive, Ent) )
    {
      pev(Ent, pev_health, Health);
      Health -= dmg;
      
      new szName[32], szName1[32];
      get_user_name(Ent, szName, charsmax(szName));
      get_user_name(id, szName1, charsmax(szName1));
      
      if(Health <= 0.0) 
        createKill(Ent, id, wpnName);
      else set_pev(Ent, pev_health, Health);
    }
  }             
}

// stock for create kill
stock createKill(id, attacker, weaponDescription[]) {
  new szFrags, szFrags2;
  
  if(id != attacker) {
    szFrags = get_user_frags(attacker);
    set_user_frags(attacker, szFrags + 1);
    logKill(attacker, id, weaponDescription);
       
    //Kill the victim and block the messages
    set_msg_block(g_iMsgDeath,BLOCK_ONCE);
    set_msg_block(g_iMsgScoreInfo,BLOCK_ONCE);
    user_kill(id);
      
    //user_kill removes a frag, this gives it back
    szFrags2 = get_user_frags(id);
    set_user_frags(id, szFrags2 + 1);
      
    //Replaced HUD death message
    message_begin(MSG_ALL, g_iMsgDeath,{0,0,0},0);
    write_byte(attacker);
    write_byte(id);
    write_byte(0);
    write_string(weaponDescription);
    message_end();
      
    //Update killers scorboard with new info
    message_begin(MSG_ALL, g_iMsgScoreInfo);
    write_byte(attacker);
    write_short(szFrags);
    write_short(get_user_deaths(attacker));
    write_short(0);
    write_short(get_user_team(attacker));
    message_end();
      
    //Update victims scoreboard with correct info
    message_begin(MSG_ALL, g_iMsgScoreInfo);
    write_byte(id);
    write_short(szFrags2);
    write_short(get_user_deaths(id));
    write_short(0);
    write_short(get_user_team(id));
    message_end();
    
    new szName[32], szName1[32];
    get_user_name(id, szName, charsmax(szName));
    get_user_name(attacker, szName1, charsmax(szName1));
  }
}

// stock for log kill
stock logKill(id, victim, weaponDescription[] ) {
  new namea[32],namev[32],authida[35],authidv[35],teama[16],teamv[16];
   
  //Info On Attacker
  get_user_name(id,namea,charsmax(namea));
  get_user_team(id,teama,15);
  get_user_authid(id,authida,34);
   
  //Info On Victim
  get_user_name(victim,namev,charsmax(namev));
  get_user_team(victim,teamv,15);
  get_user_authid(victim,authidv,34);
   
  //Log This Kill
  if(id != victim)
    log_message("^"%s<%d><%s><%s>^" killed ^"%s<%d><%s><%s>^" with ^"%s^"",
    namea,get_user_userid(id),authida,teama,namev,get_user_userid(victim),authidv,teamv, weaponDescription );
  else
    log_message("^"%s<%d><%s><%s>^" committed suicide with ^"%s^"",
    namea,get_user_userid(id),authida,teama, weaponDescription );
}
